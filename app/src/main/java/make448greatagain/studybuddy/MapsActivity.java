package make448greatagain.studybuddy;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.MenuItem;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import java.util.LinkedList;

import make448greatagain.studybuddy.Activities.AppActionBarActivity;
import make448greatagain.studybuddy.Messaging.PopupMessageCreator;

import static make448greatagain.studybuddy.R.id.map;


/**
 * Map Activity, Display Map and its Components
 */
public class MapsActivity extends AppActionBarActivity implements OnMapReadyCallback,
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener,
        LocationListener {

    /**
     * Map Object
     */
    private GoogleMap mMap;

    /**
     * API Client for location Updates
     */
    private GoogleApiClient mGoogleApiClient;

    /**
     * This context
     */
    private Context context;

    /**
     * Handler thread for plotting clients onto the map
     */
    private NearbyClientsPlotter ncp;

    /**
     * Location request object containing details
     */
    LocationRequest mLocationRequest;
    /**
     * Marker showing this user
     */
    Marker mCurrentLocationMarker = null;
    /**
     * Flag to ensure we only move the map once.
     */
    boolean firstUpdate = true;

    /**
     * Create the activity
     * @param savedInstanceState Android instance state
     * Auto Generated by Android Studio
     */
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.context = this;
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(map);
        mapFragment.getMapAsync(this);
    }

    /**
     * handle on back pressed action
     */
    public void onBackPressed(){
        close();
    }

    /**
     * Clean up threads
     */
    private void close(){

        ncp.running = false;
        synchronized (NearbyClients.getInstance().timerMutex){
           NearbyClients.getInstance().timerMutex.notify();
        }
        try{
            ncp.join();
        }catch(InterruptedException e){
            //
        }
        ncp = null;
        if (mGoogleApiClient != null) {
            LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
        mGoogleApiClient.disconnect();
        super.onBackPressed();
    }


    /**
     * Create the API Client for GoogleMaps and start it.
     */
    protected synchronized void buildGoogleApiClient() {
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        mGoogleApiClient.connect();

    }

    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     * Documentation Auto Generated by Android Studio
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this,
                    android.Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {
                buildGoogleApiClient();
                mMap.setMyLocationEnabled(true);
            }
        }
        else
        {
            buildGoogleApiClient();
            mMap.setMyLocationEnabled(true);
        }
        if(ncp == null)
        {
            ncp = new NearbyClientsPlotter(mMap);
            ncp.start();
        }
    }

    /**
     * On connection to api services
     * @param bundle savedInstanceState
     */
    @Override
    public void onConnected(@Nullable Bundle bundle) {
        mLocationRequest = new LocationRequest();

            mLocationRequest.setInterval(1000);
            mLocationRequest.setFastestInterval(1000);
            mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED)
        {
            Log.d("MapsActivity","Start API Services");
            LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        }else
        {
            Log.e("MapsActivity","API Services Start Error");
        }

    }

    /**
     * Handle menu item pressed
     * @param item Menu Item that was pressed
     * @return Success status
     */
    public boolean onOptionsItemSelected(MenuItem item)
    {
        switch(item.getItemId())
        {
            case R.id.logout:
                close();
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Do nothing, will revisit if needed
     * @param i Status code
     */
    @Override
    public void onConnectionSuspended(int i) {

    }
    /**
     * Do nothing, will revisit if needed
     * @param connectionResult Status Code
     */
    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }

    /**
     * Update the map to reflect a new user location.
     * @param location new Location
     */
    @Override
    public void onLocationChanged(Location location) {
        Log.d("MapsActivity","Location Changed");
       
        if (mCurrentLocationMarker != null) {
                mCurrentLocationMarker.remove();
        }


        //place current location marker
        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
        MarkerOptions markerOptions = new MarkerOptions();
        markerOptions.position(latLng);
        markerOptions.title(getResources().getString(R.string.CurrentPosition));
        if(UserManager.getUser() != null)
        {
            markerOptions.snippet(UserManager.getUser().courseID + " " + UserManager.getUser().courseName + " " + UserManager.getUser().comments );
        }

        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));
        mCurrentLocationMarker = mMap.addMarker(markerOptions);

        //move map camera
        if(firstUpdate){
            mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));
            mMap.animateCamera(CameraUpdateFactory.zoomTo(11));
            firstUpdate = false;
        }

        mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
            @Override
            public void onInfoWindowClick(Marker marker) {
                String[] args = marker.getTitle().split("'");
                if(!(getResources().getString(R.string.CurrentPosition).equals(args[0]))){
                    UserManager.addFriend(args[0]);
                    PopupMessageCreator.create(context,args[0]);
                }
            }
        });
    }



    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;

    /**
     * Handle response to request permissions popup
     * @param requestCode type of request
     * @param permissions List of permissions
     * @param grantResults Result of permissions
     */
    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String permissions[], @NonNull int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_LOCATION: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // Permission was granted.
                    if (ContextCompat.checkSelfPermission(this,
                            Manifest.permission.ACCESS_FINE_LOCATION)
                            == PackageManager.PERMISSION_GRANTED) {

                        if (mGoogleApiClient == null) {
                            buildGoogleApiClient();
                        }
                        mMap.setMyLocationEnabled(true);
                    }

                } else {
                    // Permission denied, Disable the functionality that depends on this permission.
                    android.widget.Toast.makeText(this, "permission denied", android.widget.Toast.LENGTH_LONG).show();
                }
                break;
            }
        }
    }

    /**
     * Background process to add nearby markers to the map
     */
    private class NearbyClientsPlotter extends Thread{
        private GoogleMap mMap;
        volatile boolean running;
        final private LinkedList<Marker> markerLinkedList;
        NearbyClientsPlotter(GoogleMap mMap)
        {
            this.mMap = mMap;
            this.markerLinkedList = new LinkedList<>();
        }
        public void start()
        {
            running = true;
            super.start();
        }

        /**
         * Run the thread, looping forever with 10 second pauses.
         */
        public void run()
        {
            while(running)
            {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        for (int i = 0; i < markerLinkedList.size(); i++) {
                            markerLinkedList.get(i).remove();
                        }
                    }
                });

                final LinkedList<MarkerOptions> mo = new LinkedList<>();
                for (int i = 0; i < NearbyClients.locations.size(); i++) {
                    LocationObject locationObject = NearbyClients.locations.get(i);
                    if(locationObject.user.equalsIgnoreCase(UserManager.getUser().username)){
                        continue;
                    }
                    Log.d("NearbyClientsPlotter", "User="+locationObject.user+" Lat="+locationObject.lat + " Lng="+locationObject.lng);
                    LatLng latLng = new LatLng(locationObject.lat, locationObject.lng);
                    final MarkerOptions markerOptions = new MarkerOptions();
                    markerOptions.position(latLng);
                    String str = getResources().getString(R.string.UsersPosition);
                    str = String.format(str,locationObject.user);
                    markerOptions.title(str);
                    if(!locationObject.subject.equals("") && !locationObject.course.equals(""))
                    {
                        markerOptions.snippet("Course: "+locationObject.course+"-"+locationObject.subject);
                        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED));
                    }
                    mo.add(markerOptions);
                }

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        for(int i = 0; i < mo.size(); i++ ) {
                                markerLinkedList.add(mMap.addMarker(mo.get(i)));
                        }
                    }
                });

                try{
                    synchronized (NearbyClients.getInstance().timerMutex)
                    {
                        NearbyClients.getInstance().timerMutex.wait(60*1000);
                        Log.e(this.getClass().getSimpleName(),"ReDrawing");
                    }
                }catch(InterruptedException e)
                {
                    Log.e(this.getClass().getSimpleName(),e.getMessage());
                }
            }
        }
    }
}
